/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ChainBreak {
  export type TxStruct = {
    amount: BigNumberish;
    description: string;
    createdAt: BigNumberish;
    from1: boolean;
    status: BigNumberish;
    txType: BigNumberish;
  };

  export type TxStructOutput = [
    amount: bigint,
    description: string,
    createdAt: bigint,
    from1: boolean,
    status: bigint,
    txType: bigint
  ] & {
    amount: bigint;
    description: string;
    createdAt: bigint;
    from1: boolean;
    status: bigint;
    txType: bigint;
  };

  export type ChannelStruct = {
    balance1: BigNumberish;
    balance2: BigNumberish;
    fees: BigNumberish;
    txs: ChainBreak.TxStruct[];
  };

  export type ChannelStructOutput = [
    balance1: bigint,
    balance2: bigint,
    fees: bigint,
    txs: ChainBreak.TxStructOutput[]
  ] & {
    balance1: bigint;
    balance2: bigint;
    fees: bigint;
    txs: ChainBreak.TxStructOutput[];
  };

  export type ChannelViewStruct = {
    user1: AddressLike;
    user2: AddressLike;
    channel: ChainBreak.ChannelStruct;
  };

  export type ChannelViewStructOutput = [
    user1: string,
    user2: string,
    channel: ChainBreak.ChannelStructOutput
  ] & { user1: string; user2: string; channel: ChainBreak.ChannelStructOutput };

  export type TxViewStruct = {
    user1: AddressLike;
    user2: AddressLike;
    idx: BigNumberish;
    tx: ChainBreak.TxStruct;
  };

  export type TxViewStructOutput = [
    user1: string,
    user2: string,
    idx: bigint,
    tx: ChainBreak.TxStructOutput
  ] & {
    user1: string;
    user2: string;
    idx: bigint;
    tx: ChainBreak.TxStructOutput;
  };
}

export interface ChainBreakInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allUsers"
      | "breakDebtCircuit"
      | "channelFor"
      | "confirmTx"
      | "createTx"
      | "getAllUserChannels"
      | "getPendingTxs"
      | "getTx"
      | "getUserContacts"
      | "rejectTx"
      | "sort"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Transaction"
      | "TransactionConfirmed"
      | "TransactionRejected"
  ): EventFragment;

  encodeFunctionData(functionFragment: "allUsers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "breakDebtCircuit",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "channelFor",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTx",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTx",
    values: [AddressLike, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUserChannels",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingTxs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTx",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserContacts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectTx",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sort",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "allUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "breakDebtCircuit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "channelFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "confirmTx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createTx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllUserChannels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserContacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rejectTx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sort", data: BytesLike): Result;
}

export namespace TransactionEvent {
  export type InputTuple = [
    user1: AddressLike,
    user2: AddressLike,
    transaction: ChainBreak.TxStruct,
    idx: BigNumberish
  ];
  export type OutputTuple = [
    user1: string,
    user2: string,
    transaction: ChainBreak.TxStructOutput,
    idx: bigint
  ];
  export interface OutputObject {
    user1: string;
    user2: string;
    transaction: ChainBreak.TxStructOutput;
    idx: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionConfirmedEvent {
  export type InputTuple = [
    user1: AddressLike,
    user2: AddressLike,
    transaction: ChainBreak.TxStruct,
    idx: BigNumberish
  ];
  export type OutputTuple = [
    user1: string,
    user2: string,
    transaction: ChainBreak.TxStructOutput,
    idx: bigint
  ];
  export interface OutputObject {
    user1: string;
    user2: string;
    transaction: ChainBreak.TxStructOutput;
    idx: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionRejectedEvent {
  export type InputTuple = [
    user1: AddressLike,
    user2: AddressLike,
    transaction: ChainBreak.TxStruct,
    idx: BigNumberish
  ];
  export type OutputTuple = [
    user1: string,
    user2: string,
    transaction: ChainBreak.TxStructOutput,
    idx: bigint
  ];
  export interface OutputObject {
    user1: string;
    user2: string;
    transaction: ChainBreak.TxStructOutput;
    idx: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainBreak extends BaseContract {
  connect(runner?: ContractRunner | null): ChainBreak;
  waitForDeployment(): Promise<this>;

  interface: ChainBreakInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allUsers: TypedContractMethod<[], [string[]], "view">;

  breakDebtCircuit: TypedContractMethod<
    [users: AddressLike[], amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  channelFor: TypedContractMethod<
    [addr1: AddressLike, addr2: AddressLike],
    [
      [string, string, ChainBreak.ChannelStructOutput] & {
        user1: string;
        user2: string;
      }
    ],
    "view"
  >;

  confirmTx: TypedContractMethod<
    [user: AddressLike, idx: BigNumberish],
    [void],
    "nonpayable"
  >;

  createTx: TypedContractMethod<
    [
      user: AddressLike,
      amount: BigNumberish,
      description: string,
      send: boolean
    ],
    [void],
    "payable"
  >;

  getAllUserChannels: TypedContractMethod<
    [user: AddressLike],
    [ChainBreak.ChannelViewStructOutput[]],
    "view"
  >;

  getPendingTxs: TypedContractMethod<
    [user: AddressLike],
    [ChainBreak.TxViewStructOutput[]],
    "view"
  >;

  getTx: TypedContractMethod<
    [user1: AddressLike, user2: AddressLike, idx: BigNumberish],
    [ChainBreak.TxStructOutput],
    "view"
  >;

  getUserContacts: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  rejectTx: TypedContractMethod<
    [user: AddressLike, idx: BigNumberish],
    [void],
    "nonpayable"
  >;

  sort: TypedContractMethod<
    [user1: AddressLike, user2: AddressLike],
    [[string, string]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allUsers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "breakDebtCircuit"
  ): TypedContractMethod<
    [users: AddressLike[], amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "channelFor"
  ): TypedContractMethod<
    [addr1: AddressLike, addr2: AddressLike],
    [
      [string, string, ChainBreak.ChannelStructOutput] & {
        user1: string;
        user2: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "confirmTx"
  ): TypedContractMethod<
    [user: AddressLike, idx: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTx"
  ): TypedContractMethod<
    [
      user: AddressLike,
      amount: BigNumberish,
      description: string,
      send: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getAllUserChannels"
  ): TypedContractMethod<
    [user: AddressLike],
    [ChainBreak.ChannelViewStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingTxs"
  ): TypedContractMethod<
    [user: AddressLike],
    [ChainBreak.TxViewStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTx"
  ): TypedContractMethod<
    [user1: AddressLike, user2: AddressLike, idx: BigNumberish],
    [ChainBreak.TxStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserContacts"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "rejectTx"
  ): TypedContractMethod<
    [user: AddressLike, idx: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sort"
  ): TypedContractMethod<
    [user1: AddressLike, user2: AddressLike],
    [[string, string]],
    "view"
  >;

  getEvent(
    key: "Transaction"
  ): TypedContractEvent<
    TransactionEvent.InputTuple,
    TransactionEvent.OutputTuple,
    TransactionEvent.OutputObject
  >;
  getEvent(
    key: "TransactionConfirmed"
  ): TypedContractEvent<
    TransactionConfirmedEvent.InputTuple,
    TransactionConfirmedEvent.OutputTuple,
    TransactionConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionRejected"
  ): TypedContractEvent<
    TransactionRejectedEvent.InputTuple,
    TransactionRejectedEvent.OutputTuple,
    TransactionRejectedEvent.OutputObject
  >;

  filters: {
    "Transaction(address,address,tuple,uint256)": TypedContractEvent<
      TransactionEvent.InputTuple,
      TransactionEvent.OutputTuple,
      TransactionEvent.OutputObject
    >;
    Transaction: TypedContractEvent<
      TransactionEvent.InputTuple,
      TransactionEvent.OutputTuple,
      TransactionEvent.OutputObject
    >;

    "TransactionConfirmed(address,address,tuple,uint256)": TypedContractEvent<
      TransactionConfirmedEvent.InputTuple,
      TransactionConfirmedEvent.OutputTuple,
      TransactionConfirmedEvent.OutputObject
    >;
    TransactionConfirmed: TypedContractEvent<
      TransactionConfirmedEvent.InputTuple,
      TransactionConfirmedEvent.OutputTuple,
      TransactionConfirmedEvent.OutputObject
    >;

    "TransactionRejected(address,address,tuple,uint256)": TypedContractEvent<
      TransactionRejectedEvent.InputTuple,
      TransactionRejectedEvent.OutputTuple,
      TransactionRejectedEvent.OutputObject
    >;
    TransactionRejected: TypedContractEvent<
      TransactionRejectedEvent.InputTuple,
      TransactionRejectedEvent.OutputTuple,
      TransactionRejectedEvent.OutputObject
    >;
  };
}
